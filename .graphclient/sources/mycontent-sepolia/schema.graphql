schema {
  query: Query
}

"""
Marks the GraphQL type as indexable entity.  Each type that should be an entity is required to be annotated with this directive.
"""
directive @entity on OBJECT

"""Defined a Subgraph ID for an object type"""
directive @subgraphId(id: String!) on OBJECT

"""
creates a virtual field on the entity that may be queried but cannot be set manually through the mappings API.
"""
directive @derivedFrom(field: String!) on FIELD_DEFINITION

enum Aggregation_interval {
  hour
  day
}

type Author {
  id: ID!
  postCount: Int!
  totalLikes: Int!
  totalBookmarks: Int!
}

input Author_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  postCount: Int
  postCount_not: Int
  postCount_gt: Int
  postCount_lt: Int
  postCount_gte: Int
  postCount_lte: Int
  postCount_in: [Int!]
  postCount_not_in: [Int!]
  totalLikes: Int
  totalLikes_not: Int
  totalLikes_gt: Int
  totalLikes_lt: Int
  totalLikes_gte: Int
  totalLikes_lte: Int
  totalLikes_in: [Int!]
  totalLikes_not_in: [Int!]
  totalBookmarks: Int
  totalBookmarks_not: Int
  totalBookmarks_gt: Int
  totalBookmarks_lt: Int
  totalBookmarks_gte: Int
  totalBookmarks_lte: Int
  totalBookmarks_in: [Int!]
  totalBookmarks_not_in: [Int!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Author_filter]
  or: [Author_filter]
}

enum Author_orderBy {
  id
  postCount
  totalLikes
  totalBookmarks
}

scalar BigDecimal

scalar BigInt

input BlockChangedFilter {
  number_gte: Int!
}

input Block_height {
  hash: Bytes
  number: Int
  number_gte: Int
}

type Bookmark {
  id: ID!
  post: Post!
  user: Bytes!
  timestamp: BigInt!
}

input Bookmark_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  post: String
  post_not: String
  post_gt: String
  post_lt: String
  post_gte: String
  post_lte: String
  post_in: [String!]
  post_not_in: [String!]
  post_contains: String
  post_contains_nocase: String
  post_not_contains: String
  post_not_contains_nocase: String
  post_starts_with: String
  post_starts_with_nocase: String
  post_not_starts_with: String
  post_not_starts_with_nocase: String
  post_ends_with: String
  post_ends_with_nocase: String
  post_not_ends_with: String
  post_not_ends_with_nocase: String
  post_: Post_filter
  user: Bytes
  user_not: Bytes
  user_gt: Bytes
  user_lt: Bytes
  user_gte: Bytes
  user_lte: Bytes
  user_in: [Bytes!]
  user_not_in: [Bytes!]
  user_contains: Bytes
  user_not_contains: Bytes
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Bookmark_filter]
  or: [Bookmark_filter]
}

enum Bookmark_orderBy {
  id
  post
  post__id
  post__author
  post__authorString
  post__cid
  post__title
  post__likes
  post__bookmarks
  post__isDeleted
  post__exists
  post__blockNumber
  post__blockTimestamp
  post__transactionHash
  user
  timestamp
}

scalar Bytes

type Comment {
  id: ID!
  post: Post!
  commenter: Bytes!
  cid: String!
  isDeleted: Boolean!
  exists: Boolean!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

input Comment_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  post: String
  post_not: String
  post_gt: String
  post_lt: String
  post_gte: String
  post_lte: String
  post_in: [String!]
  post_not_in: [String!]
  post_contains: String
  post_contains_nocase: String
  post_not_contains: String
  post_not_contains_nocase: String
  post_starts_with: String
  post_starts_with_nocase: String
  post_not_starts_with: String
  post_not_starts_with_nocase: String
  post_ends_with: String
  post_ends_with_nocase: String
  post_not_ends_with: String
  post_not_ends_with_nocase: String
  post_: Post_filter
  commenter: Bytes
  commenter_not: Bytes
  commenter_gt: Bytes
  commenter_lt: Bytes
  commenter_gte: Bytes
  commenter_lte: Bytes
  commenter_in: [Bytes!]
  commenter_not_in: [Bytes!]
  commenter_contains: Bytes
  commenter_not_contains: Bytes
  cid: String
  cid_not: String
  cid_gt: String
  cid_lt: String
  cid_gte: String
  cid_lte: String
  cid_in: [String!]
  cid_not_in: [String!]
  cid_contains: String
  cid_contains_nocase: String
  cid_not_contains: String
  cid_not_contains_nocase: String
  cid_starts_with: String
  cid_starts_with_nocase: String
  cid_not_starts_with: String
  cid_not_starts_with_nocase: String
  cid_ends_with: String
  cid_ends_with_nocase: String
  cid_not_ends_with: String
  cid_not_ends_with_nocase: String
  isDeleted: Boolean
  isDeleted_not: Boolean
  isDeleted_in: [Boolean!]
  isDeleted_not_in: [Boolean!]
  exists: Boolean
  exists_not: Boolean
  exists_in: [Boolean!]
  exists_not_in: [Boolean!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  blockTimestamp: BigInt
  blockTimestamp_not: BigInt
  blockTimestamp_gt: BigInt
  blockTimestamp_lt: BigInt
  blockTimestamp_gte: BigInt
  blockTimestamp_lte: BigInt
  blockTimestamp_in: [BigInt!]
  blockTimestamp_not_in: [BigInt!]
  transactionHash: Bytes
  transactionHash_not: Bytes
  transactionHash_gt: Bytes
  transactionHash_lt: Bytes
  transactionHash_gte: Bytes
  transactionHash_lte: Bytes
  transactionHash_in: [Bytes!]
  transactionHash_not_in: [Bytes!]
  transactionHash_contains: Bytes
  transactionHash_not_contains: Bytes
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Comment_filter]
  or: [Comment_filter]
}

enum Comment_orderBy {
  id
  post
  post__id
  post__author
  post__authorString
  post__cid
  post__title
  post__likes
  post__bookmarks
  post__isDeleted
  post__exists
  post__blockNumber
  post__blockTimestamp
  post__transactionHash
  commenter
  cid
  isDeleted
  exists
  blockNumber
  blockTimestamp
  transactionHash
}

type Follow {
  id: ID!
  follower: Bytes!
  following: Bytes!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

input Follow_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  follower: Bytes
  follower_not: Bytes
  follower_gt: Bytes
  follower_lt: Bytes
  follower_gte: Bytes
  follower_lte: Bytes
  follower_in: [Bytes!]
  follower_not_in: [Bytes!]
  follower_contains: Bytes
  follower_not_contains: Bytes
  following: Bytes
  following_not: Bytes
  following_gt: Bytes
  following_lt: Bytes
  following_gte: Bytes
  following_lte: Bytes
  following_in: [Bytes!]
  following_not_in: [Bytes!]
  following_contains: Bytes
  following_not_contains: Bytes
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  blockTimestamp: BigInt
  blockTimestamp_not: BigInt
  blockTimestamp_gt: BigInt
  blockTimestamp_lt: BigInt
  blockTimestamp_gte: BigInt
  blockTimestamp_lte: BigInt
  blockTimestamp_in: [BigInt!]
  blockTimestamp_not_in: [BigInt!]
  transactionHash: Bytes
  transactionHash_not: Bytes
  transactionHash_gt: Bytes
  transactionHash_lt: Bytes
  transactionHash_gte: Bytes
  transactionHash_lte: Bytes
  transactionHash_in: [Bytes!]
  transactionHash_not_in: [Bytes!]
  transactionHash_contains: Bytes
  transactionHash_not_contains: Bytes
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Follow_filter]
  or: [Follow_filter]
}

enum Follow_orderBy {
  id
  follower
  following
  blockNumber
  blockTimestamp
  transactionHash
}

"""
8 bytes signed integer

"""
scalar Int8

type Like {
  id: ID!
  post: Post!
  user: Bytes!
  timestamp: BigInt!
}

input Like_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  post: String
  post_not: String
  post_gt: String
  post_lt: String
  post_gte: String
  post_lte: String
  post_in: [String!]
  post_not_in: [String!]
  post_contains: String
  post_contains_nocase: String
  post_not_contains: String
  post_not_contains_nocase: String
  post_starts_with: String
  post_starts_with_nocase: String
  post_not_starts_with: String
  post_not_starts_with_nocase: String
  post_ends_with: String
  post_ends_with_nocase: String
  post_not_ends_with: String
  post_not_ends_with_nocase: String
  post_: Post_filter
  user: Bytes
  user_not: Bytes
  user_gt: Bytes
  user_lt: Bytes
  user_gte: Bytes
  user_lte: Bytes
  user_in: [Bytes!]
  user_not_in: [Bytes!]
  user_contains: Bytes
  user_not_contains: Bytes
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Like_filter]
  or: [Like_filter]
}

enum Like_orderBy {
  id
  post
  post__id
  post__author
  post__authorString
  post__cid
  post__title
  post__likes
  post__bookmarks
  post__isDeleted
  post__exists
  post__blockNumber
  post__blockTimestamp
  post__transactionHash
  user
  timestamp
}

"""Defines the order direction, either ascending or descending"""
enum OrderDirection {
  asc
  desc
}

type Post {
  id: ID!
  author: Bytes!
  authorString: String!
  cid: String!
  title: String!
  tags(skip: Int = 0, first: Int = 100, orderBy: Tag_orderBy, orderDirection: OrderDirection, where: Tag_filter): [Tag!]!
  comments(skip: Int = 0, first: Int = 100, orderBy: Comment_orderBy, orderDirection: OrderDirection, where: Comment_filter): [Comment!]!
  likes: Int!
  bookmarks: Int!
  isDeleted: Boolean!
  exists: Boolean!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

input Post_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  author: Bytes
  author_not: Bytes
  author_gt: Bytes
  author_lt: Bytes
  author_gte: Bytes
  author_lte: Bytes
  author_in: [Bytes!]
  author_not_in: [Bytes!]
  author_contains: Bytes
  author_not_contains: Bytes
  authorString: String
  authorString_not: String
  authorString_gt: String
  authorString_lt: String
  authorString_gte: String
  authorString_lte: String
  authorString_in: [String!]
  authorString_not_in: [String!]
  authorString_contains: String
  authorString_contains_nocase: String
  authorString_not_contains: String
  authorString_not_contains_nocase: String
  authorString_starts_with: String
  authorString_starts_with_nocase: String
  authorString_not_starts_with: String
  authorString_not_starts_with_nocase: String
  authorString_ends_with: String
  authorString_ends_with_nocase: String
  authorString_not_ends_with: String
  authorString_not_ends_with_nocase: String
  cid: String
  cid_not: String
  cid_gt: String
  cid_lt: String
  cid_gte: String
  cid_lte: String
  cid_in: [String!]
  cid_not_in: [String!]
  cid_contains: String
  cid_contains_nocase: String
  cid_not_contains: String
  cid_not_contains_nocase: String
  cid_starts_with: String
  cid_starts_with_nocase: String
  cid_not_starts_with: String
  cid_not_starts_with_nocase: String
  cid_ends_with: String
  cid_ends_with_nocase: String
  cid_not_ends_with: String
  cid_not_ends_with_nocase: String
  title: String
  title_not: String
  title_gt: String
  title_lt: String
  title_gte: String
  title_lte: String
  title_in: [String!]
  title_not_in: [String!]
  title_contains: String
  title_contains_nocase: String
  title_not_contains: String
  title_not_contains_nocase: String
  title_starts_with: String
  title_starts_with_nocase: String
  title_not_starts_with: String
  title_not_starts_with_nocase: String
  title_ends_with: String
  title_ends_with_nocase: String
  title_not_ends_with: String
  title_not_ends_with_nocase: String
  tags_: Tag_filter
  comments_: Comment_filter
  likes: Int
  likes_not: Int
  likes_gt: Int
  likes_lt: Int
  likes_gte: Int
  likes_lte: Int
  likes_in: [Int!]
  likes_not_in: [Int!]
  bookmarks: Int
  bookmarks_not: Int
  bookmarks_gt: Int
  bookmarks_lt: Int
  bookmarks_gte: Int
  bookmarks_lte: Int
  bookmarks_in: [Int!]
  bookmarks_not_in: [Int!]
  isDeleted: Boolean
  isDeleted_not: Boolean
  isDeleted_in: [Boolean!]
  isDeleted_not_in: [Boolean!]
  exists: Boolean
  exists_not: Boolean
  exists_in: [Boolean!]
  exists_not_in: [Boolean!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  blockTimestamp: BigInt
  blockTimestamp_not: BigInt
  blockTimestamp_gt: BigInt
  blockTimestamp_lt: BigInt
  blockTimestamp_gte: BigInt
  blockTimestamp_lte: BigInt
  blockTimestamp_in: [BigInt!]
  blockTimestamp_not_in: [BigInt!]
  transactionHash: Bytes
  transactionHash_not: Bytes
  transactionHash_gt: Bytes
  transactionHash_lt: Bytes
  transactionHash_gte: Bytes
  transactionHash_lte: Bytes
  transactionHash_in: [Bytes!]
  transactionHash_not_in: [Bytes!]
  transactionHash_contains: Bytes
  transactionHash_not_contains: Bytes
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Post_filter]
  or: [Post_filter]
}

enum Post_orderBy {
  id
  author
  authorString
  cid
  title
  tags
  comments
  likes
  bookmarks
  isDeleted
  exists
  blockNumber
  blockTimestamp
  transactionHash
}

type Profile {
  id: ID!
  user: Bytes!
  username: String!
  bio: String!
  imageCID: String!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

input Profile_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  user: Bytes
  user_not: Bytes
  user_gt: Bytes
  user_lt: Bytes
  user_gte: Bytes
  user_lte: Bytes
  user_in: [Bytes!]
  user_not_in: [Bytes!]
  user_contains: Bytes
  user_not_contains: Bytes
  username: String
  username_not: String
  username_gt: String
  username_lt: String
  username_gte: String
  username_lte: String
  username_in: [String!]
  username_not_in: [String!]
  username_contains: String
  username_contains_nocase: String
  username_not_contains: String
  username_not_contains_nocase: String
  username_starts_with: String
  username_starts_with_nocase: String
  username_not_starts_with: String
  username_not_starts_with_nocase: String
  username_ends_with: String
  username_ends_with_nocase: String
  username_not_ends_with: String
  username_not_ends_with_nocase: String
  bio: String
  bio_not: String
  bio_gt: String
  bio_lt: String
  bio_gte: String
  bio_lte: String
  bio_in: [String!]
  bio_not_in: [String!]
  bio_contains: String
  bio_contains_nocase: String
  bio_not_contains: String
  bio_not_contains_nocase: String
  bio_starts_with: String
  bio_starts_with_nocase: String
  bio_not_starts_with: String
  bio_not_starts_with_nocase: String
  bio_ends_with: String
  bio_ends_with_nocase: String
  bio_not_ends_with: String
  bio_not_ends_with_nocase: String
  imageCID: String
  imageCID_not: String
  imageCID_gt: String
  imageCID_lt: String
  imageCID_gte: String
  imageCID_lte: String
  imageCID_in: [String!]
  imageCID_not_in: [String!]
  imageCID_contains: String
  imageCID_contains_nocase: String
  imageCID_not_contains: String
  imageCID_not_contains_nocase: String
  imageCID_starts_with: String
  imageCID_starts_with_nocase: String
  imageCID_not_starts_with: String
  imageCID_not_starts_with_nocase: String
  imageCID_ends_with: String
  imageCID_ends_with_nocase: String
  imageCID_not_ends_with: String
  imageCID_not_ends_with_nocase: String
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  blockTimestamp: BigInt
  blockTimestamp_not: BigInt
  blockTimestamp_gt: BigInt
  blockTimestamp_lt: BigInt
  blockTimestamp_gte: BigInt
  blockTimestamp_lte: BigInt
  blockTimestamp_in: [BigInt!]
  blockTimestamp_not_in: [BigInt!]
  transactionHash: Bytes
  transactionHash_not: Bytes
  transactionHash_gt: Bytes
  transactionHash_lt: Bytes
  transactionHash_gte: Bytes
  transactionHash_lte: Bytes
  transactionHash_in: [Bytes!]
  transactionHash_not_in: [Bytes!]
  transactionHash_contains: Bytes
  transactionHash_not_contains: Bytes
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Profile_filter]
  or: [Profile_filter]
}

enum Profile_orderBy {
  id
  user
  username
  bio
  imageCID
  blockNumber
  blockTimestamp
  transactionHash
}

type Query {
  comment(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Comment
  comments(
    skip: Int = 0
    first: Int = 100
    orderBy: Comment_orderBy
    orderDirection: OrderDirection
    where: Comment_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Comment!]!
  follow(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Follow
  follows(
    skip: Int = 0
    first: Int = 100
    orderBy: Follow_orderBy
    orderDirection: OrderDirection
    where: Follow_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Follow!]!
  post(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Post
  posts(
    skip: Int = 0
    first: Int = 100
    orderBy: Post_orderBy
    orderDirection: OrderDirection
    where: Post_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Post!]!
  author(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Author
  authors(
    skip: Int = 0
    first: Int = 100
    orderBy: Author_orderBy
    orderDirection: OrderDirection
    where: Author_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Author!]!
  like(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Like
  likes(
    skip: Int = 0
    first: Int = 100
    orderBy: Like_orderBy
    orderDirection: OrderDirection
    where: Like_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Like!]!
  bookmark(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Bookmark
  bookmarks(
    skip: Int = 0
    first: Int = 100
    orderBy: Bookmark_orderBy
    orderDirection: OrderDirection
    where: Bookmark_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Bookmark!]!
  profile(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Profile
  profiles(
    skip: Int = 0
    first: Int = 100
    orderBy: Profile_orderBy
    orderDirection: OrderDirection
    where: Profile_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Profile!]!
  tag(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Tag
  tags(
    skip: Int = 0
    first: Int = 100
    orderBy: Tag_orderBy
    orderDirection: OrderDirection
    where: Tag_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Tag!]!
  tagSummary(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TagSummary
  tagSummaries(
    skip: Int = 0
    first: Int = 100
    orderBy: TagSummary_orderBy
    orderDirection: OrderDirection
    where: TagSummary_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TagSummary!]!
  tip(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Tip
  tips(
    skip: Int = 0
    first: Int = 100
    orderBy: Tip_orderBy
    orderDirection: OrderDirection
    where: Tip_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Tip!]!
  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
}

type Tag {
  id: ID!
  post: Post!
  tag: String!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type TagSummary {
  id: ID!
  count: Int!
  lastUsed: BigInt
}

input TagSummary_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  count: Int
  count_not: Int
  count_gt: Int
  count_lt: Int
  count_gte: Int
  count_lte: Int
  count_in: [Int!]
  count_not_in: [Int!]
  lastUsed: BigInt
  lastUsed_not: BigInt
  lastUsed_gt: BigInt
  lastUsed_lt: BigInt
  lastUsed_gte: BigInt
  lastUsed_lte: BigInt
  lastUsed_in: [BigInt!]
  lastUsed_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [TagSummary_filter]
  or: [TagSummary_filter]
}

enum TagSummary_orderBy {
  id
  count
  lastUsed
}

input Tag_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  post: String
  post_not: String
  post_gt: String
  post_lt: String
  post_gte: String
  post_lte: String
  post_in: [String!]
  post_not_in: [String!]
  post_contains: String
  post_contains_nocase: String
  post_not_contains: String
  post_not_contains_nocase: String
  post_starts_with: String
  post_starts_with_nocase: String
  post_not_starts_with: String
  post_not_starts_with_nocase: String
  post_ends_with: String
  post_ends_with_nocase: String
  post_not_ends_with: String
  post_not_ends_with_nocase: String
  post_: Post_filter
  tag: String
  tag_not: String
  tag_gt: String
  tag_lt: String
  tag_gte: String
  tag_lte: String
  tag_in: [String!]
  tag_not_in: [String!]
  tag_contains: String
  tag_contains_nocase: String
  tag_not_contains: String
  tag_not_contains_nocase: String
  tag_starts_with: String
  tag_starts_with_nocase: String
  tag_not_starts_with: String
  tag_not_starts_with_nocase: String
  tag_ends_with: String
  tag_ends_with_nocase: String
  tag_not_ends_with: String
  tag_not_ends_with_nocase: String
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  blockTimestamp: BigInt
  blockTimestamp_not: BigInt
  blockTimestamp_gt: BigInt
  blockTimestamp_lt: BigInt
  blockTimestamp_gte: BigInt
  blockTimestamp_lte: BigInt
  blockTimestamp_in: [BigInt!]
  blockTimestamp_not_in: [BigInt!]
  transactionHash: Bytes
  transactionHash_not: Bytes
  transactionHash_gt: Bytes
  transactionHash_lt: Bytes
  transactionHash_gte: Bytes
  transactionHash_lte: Bytes
  transactionHash_in: [Bytes!]
  transactionHash_not_in: [Bytes!]
  transactionHash_contains: Bytes
  transactionHash_not_contains: Bytes
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Tag_filter]
  or: [Tag_filter]
}

enum Tag_orderBy {
  id
  post
  post__id
  post__author
  post__authorString
  post__cid
  post__title
  post__likes
  post__bookmarks
  post__isDeleted
  post__exists
  post__blockNumber
  post__blockTimestamp
  post__transactionHash
  tag
  blockNumber
  blockTimestamp
  transactionHash
}

"""
A string representation of microseconds UNIX timestamp (16 digits)

"""
scalar Timestamp

type Tip {
  id: ID!
  from: Bytes!
  to: Bytes!
  amount: BigInt!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

input Tip_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  from: Bytes
  from_not: Bytes
  from_gt: Bytes
  from_lt: Bytes
  from_gte: Bytes
  from_lte: Bytes
  from_in: [Bytes!]
  from_not_in: [Bytes!]
  from_contains: Bytes
  from_not_contains: Bytes
  to: Bytes
  to_not: Bytes
  to_gt: Bytes
  to_lt: Bytes
  to_gte: Bytes
  to_lte: Bytes
  to_in: [Bytes!]
  to_not_in: [Bytes!]
  to_contains: Bytes
  to_not_contains: Bytes
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  blockTimestamp: BigInt
  blockTimestamp_not: BigInt
  blockTimestamp_gt: BigInt
  blockTimestamp_lt: BigInt
  blockTimestamp_gte: BigInt
  blockTimestamp_lte: BigInt
  blockTimestamp_in: [BigInt!]
  blockTimestamp_not_in: [BigInt!]
  transactionHash: Bytes
  transactionHash_not: Bytes
  transactionHash_gt: Bytes
  transactionHash_lt: Bytes
  transactionHash_gte: Bytes
  transactionHash_lte: Bytes
  transactionHash_in: [Bytes!]
  transactionHash_not_in: [Bytes!]
  transactionHash_contains: Bytes
  transactionHash_not_contains: Bytes
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Tip_filter]
  or: [Tip_filter]
}

enum Tip_orderBy {
  id
  from
  to
  amount
  blockNumber
  blockTimestamp
  transactionHash
}

type _Block_ {
  """The hash of the block"""
  hash: Bytes
  """The block number"""
  number: Int!
  """Integer representation of the timestamp stored in blocks for the chain"""
  timestamp: Int
  """The hash of the parent block"""
  parentHash: Bytes
}

"""The type for the top-level _meta field"""
type _Meta_ {
  """
  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block
  
  """
  block: _Block_!
  """The deployment ID"""
  deployment: String!
  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

enum _SubgraphErrorPolicy_ {
  """Data will be returned even if the subgraph has indexing errors"""
  allow
  """
  If the subgraph has indexing errors, data will be omitted. The default.
  """
  deny
}